package edu.ca.ualberta.code.nuggets.data;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;

public class SnippetProvider implements ISnippetProvider{

	public final static String INDEX_FILE = "./snippets.data";
	private Hashtable<String, ArrayList<Snippet>> snippets;
	
	private int lastId=0;
	
	public SnippetProvider(){
		snippets = new Hashtable<>();
	}
	
	@Override
	public ArrayList<Snippet> getSnippet(String tag) {
		
		return snippets.get(tag);
	}

	@Override
	public void saveSnippet(Snippet s, ArrayList<String> tags) {
		
		for(String tag : tags){
			ArrayList<Snippet> tt= snippets.get(tag);
			if(tt == null){
				ArrayList<Snippet> newTag = new ArrayList<>();
				newTag.add(s);
				snippets.put(tag,newTag);
			}
			else{
				tt.add(s);
				snippets.remove(tag);
				snippets.put(tag, tt);
			}
		}
		saveSnippets();
	}
	
	public void deleteSnippet(int id){
		Iterator<String> tags = snippets.keySet().iterator();
		boolean found=false;
		while(tags.hasNext()){
			String ct = tags.next();
			ArrayList<Snippet> tt= snippets.get(ct);
			for(int i=0; i<tt.size();i++){
				if(tt.get(i).getId()==id){
					tt.remove(i);
					found = true;
					break;
				}
			}
			// The snippet was found in that tag, updating the index.
			if(found){
				snippets.remove(ct);
				snippets.put(ct, tt);
				found=false;
			}	
		}
		saveSnippets();
	}
	
	private void saveSnippets(){
		try {
			FileOutputStream fos = new FileOutputStream(INDEX_FILE);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(snippets);
			fos.close();
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private Hashtable<String, ArrayList<Snippet>>  loadSnippets(){
		Hashtable<String, ArrayList<Snippet>> index = new Hashtable<>();

		try {
			FileInputStream fis = new FileInputStream(INDEX_FILE);
			ObjectInputStream ois = new ObjectInputStream(fis);

			index = (Hashtable<String, ArrayList<Snippet>>) ois.readObject();
			ois.close();

		} catch (Exception e) {
			//Silent
		} 
		

		return index;
	}
	
	private void loadLastID(){
		
	}
	
	private void saveLastID(){
		
	}
	
	
	public static void main(String...args){
		SnippetProvider sp = new SnippetProvider();
		Snippet a= new Snippet();
		a.setId(la);
		sp.saveSnippet(s, tags);
	}
	
}
