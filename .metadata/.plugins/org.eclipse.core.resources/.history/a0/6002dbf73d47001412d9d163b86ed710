package edu.ca.ualberta.code.nuggets.actions;

import java.util.ArrayList;
import java.util.Arrays;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.window.Window;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.EditorPart;
import org.eclipse.ui.texteditor.IDocumentProvider;
import org.eclipse.ui.texteditor.ITextEditor;

import edu.ca.ualberta.code.nuggets.data.ISnippetProvider;
import edu.ca.ualberta.code.nuggets.data.SerialSnippetProvider;
import edu.ca.ualberta.code.nuggets.dialogs.FindSnippetDialog;
import edu.ca.ualberta.code.nuggets.dialogs.SaveSnippetDialog;

public class NuggetMenuAction  implements IWorkbenchWindowActionDelegate {
	
	private IWorkbenchWindow window;
	
	private ISnippetProvider provider;
	
	/**
	 * Constructor
	 */
	public NuggetMenuAction (){
		provider = new SerialSnippetProvider();
	}
	
	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		//openSaveSnippetDialog();
		String actionID = action.getId();
		if(actionID.equals("edu.ca.ualberta.code.nuggets.actions.search")){
			openSearchDialog();
		}
		else if(actionID.equals(""))
		
	}
	
	/**
	 * Returns the snippet of code selected in the current active editor.
	 * @return
	 */
	private String getSelectedSnippet(){
		String snippet = "";
		try{		
			EditorPart part = (EditorPart) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();

			if ( part instanceof ITextEditor ) {
		        final ITextEditor editor = (ITextEditor)part;		        
		        ISelection sel = editor.getSelectionProvider().getSelection();
		        if ( sel instanceof TextSelection ) {
		            
		            snippet = ((TextSelection) sel).getText();
		        }
		    }
		}
		catch(Exception e){
			//Silent
		}
		
		return snippet;
	}
	
	
	/**
	 * Inserts a snippet in the current position of the caret
	 * @param snippet
	 */
	private void insertSnippet(String snippet){
		
		try{		
			EditorPart part = (EditorPart) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();

			if ( part instanceof ITextEditor ) {
		        final ITextEditor editor = (ITextEditor)part;
		        IDocumentProvider prov = editor.getDocumentProvider();
		        IDocument doc = prov.getDocument( editor.getEditorInput() );
		        ISelection sel = editor.getSelectionProvider().getSelection();
		        if ( sel instanceof TextSelection ) {
		            final TextSelection textSel = (TextSelection)sel;
		            doc.replace( textSel.getOffset(), textSel.getLength(), snippet );
		        }
		    }
		}
		catch(Exception e){
			//Silent
		}
		
	}
	
	/**
	 * Opens the save dialog, user inputs the tags and confirms the creation of a snippet.
	 */
	private void openSaveSnippetDialog(){
		
		SaveSnippetDialog dialog = new SaveSnippetDialog(window.getShell(), getSelectedSnippet());
		dialog.create();
		if (dialog.open() == Window.OK) {
		  
		  saveSnippet(dialog.getCode(), dialog.getTags());
		} 
	}
	
	private void openSearchDialog(){
		FindSnippetDialog dialog = new FindSnippetDialog(window.getShell(), provider);
		dialog.create();
		
		if (dialog.open() == Window.OK) {
			
		}
	}
	
	/**
	 * Process the tags and creates and snippet. Stores the snippet using the provider.
	 * @param code
	 * @param tagsRaw
	 */
	private void saveSnippet(String code, String tagsRaw){
		  String []tags= tagsRaw.split(",");
		  for(int i=0; i<tags.length;i++){
			  String t = tags[i];			 
			  tags[i]=t.trim();
		  }
		  ArrayList<String> tagsClean = new ArrayList<String>(Arrays.asList(tags));
		  provider.saveSnippet(code, tagsClean);

	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}

}
